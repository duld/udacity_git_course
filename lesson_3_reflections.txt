Q: When would you want to use a remote repository rather than keeping all your 
   work local?
   
   Response:
    # I can imagine that when you are looking to actively share your code with
      other individuals a remote repository would be very useful. Any form of 
      collaboration would benefit with a remote repo. Also it is another form
      of backup, a versioned backup as well. 
      
      Although keeping anything that might need to remain private on your 
      public facing repo would be a bad. A very bad.


Q: Why might you want to always pull changes manually rather than having Git 
   automatically stay up-to-date with your remote repository?

   Response:
     One reason why you wouldn't want git to automatically update your 
     repository, is if you are working in a file and someone pushes a commit 
     that include's changes to that same file. This could overwrite your work 
     possibly if you are not working on a different branch than your 
     *possibly* well meaning collaborator.


Q: Describe the differences between forks, clones, and branches. When would 
   you use one instead of another?

   Response:
   	 Fork:
     A FORK, is a type of clone which is tracked by the github database (stack 
     overflow user paulo ebermann). A fork allows you to clone a repository 
     while maintaining credit to the original author. You can pull down the 
     repository, make any changes and commit those changes back to the remote 
     repository w/o impacting the original repository linked to another 
     individuals account. One would also be able to clone another user's repo 
     then add the cloned repo to your own account and begin working off of 
     that, but the link back to the original would be lost.

     Clone:
     A CLONE is a duplicated repository and all of it's commits. This usually 
     involves downloading a remote repository to your local machine and making 
     changes and commits there.

     Branch:
     A BRANCH is an independant line of development. Branches serve as an 
     abstraction for the edit/stage/commit process. You can think of them as a 
     way to request a brand new working directory, staging area and project 
     history. New commits are recorded in the history for the current branch 
     which results in a fork in the history of the project. 
     (https://www.atlassian.com/git/tutorials/using-branches)

     If you want to make a copy of someone else's code to work on and maintain 
     credit to the original author you would want to use a Fork. If you want 
     to download one of your own remote repos onto your own machine you would 
     want to Clone. You would make a Branch any time you wanted to work on a 
     new feature, fix a bug, or make any kind of exploratory changes. This 
     work may or may not be merged into the main branch at a later time.

Q: What is the benefit of having a copy of the last known state of the remote 
   stored locally?

   Response:
     It is a nice visual way to see what the current state is of the remote 
     repository. When I saw orign/master I was a little confused at first but 
     once I read the messages that git status would output about my local repo 
     being ahead of remote by x number of commits it was appreciated.


Q: How would you collaborate without using Git or GitHub? What would be 
   easier, and what would be harder?

   Response:
     If I were to try and collaborate with other's without using GitHub, I 
     would try to limit which files each individual could work on at a given 
     time. If any big change was introduced we would go and fix the conflicts 
     in each file by hand or using an IDE. 

     I think it at the very beginning be much easier than using GitHub. The 
     parts that are easier than using GitHub I think is just not using git in 
     general. Write code the way you do when you are by yourself and 
     compromise where necissary so that source code A will be able to talk to 
     B and C etc. 

     But as the project grows, or needs to change I can imagine 
     that managing those changes could be a lot of work. There may even be 
     huge rewrites of features to match the coding standards of the team, 
     which might have grown since then.


Q: When would you want to make changes in a separate branch rather than 
   directly in master? What benefits does each approach have?

   Response:
     If you make changes in a seperate branch, it leaves master in a "stable" 
     state. It would be problematic to make a bunch of changes on the master 
	 branch, then decide you wanted to go back to an earlier time before those 
     changes. All the while other people may be commiting their own changes 
     and updating master past the point where you originally had decided to 
     abandon your changes. How do you revert back while keeping the changes 
     others have introduced?

     You would have to branch from an earlier commit, and then merge with the 
     changes introduced by others, but at the same time deal with all the 
     merge conflicts that live at the tip of the master branch. 