# Initializing an empty repository: 
	$ git init

# add files to the staging area: 
	$ git add <file name>

# to remove files from the staging area
	$ git rm --cached <file>

# How to write a commit message:
	commit message style guide: http://udacity.github.io/git-styleguide/

	/////////////////////////
	type: subject

	body

	footer
	/////////////////////////

	the Type: 
	  feat: a new feature
	  fix: a bug fix
	  docs: changes to documentation
	  style: formatting, missing semi colons, etc, no code change
	  refactor: refactoring production code
	  test: adding tests, refactoring test; no production code change
	  chore: updating build tasks, package manager configs, etc; no production 
	         code change.

	The Subject: 
	  Subjects should be no greater than 50 characters, should begin with a 
	  capital letter and do not end with a period.

	  Use an imperative tone to describe what a commit does, rather than what 
	  it did. For example, use change; not changed or changes.

	The Body:
	  Not all commits are complex enough to warrent a body, therefore it is 
	  optional and only used when a commit requires a bit of explanation and 
	  context. Use the body to explain the WHAT and WHY of a commit, not the 
	  how. Wrap text to 72 characters per line.

	The Footer:
	  The footer is optional and is only used to to reference tracker IDs.


// Compare Working Directory, Staging Area and Repository //

# Compare working directory with staging area
	$ git diff  //git diff with 0 arguments will compare these two by default

# Compare Staging Area with Repository
	$ git diff --staged

# git 'detached HEAD' state
	When git is in a detached HEAD state that means you have checked out an old
	git commit. To get back to the 'Tip' of the main repo use
	$ git checkout Master

Branches:
	The main branch in a git repository is the 'Master Branch'.

	# See what branches exist in the repository
	  $ git branch  //the branch listed with a '*' is the active branch.
    
    # Create a new branch in the repository
      $ git branch <branch name>

    # Switch to a different branch
      $ git checkout <branch name>



Merging:
	The process of 'merging' a two branchs to a single branch.


