_______________________________________________________________________________
# Initializing an empty repository: 
	$ git init

# add files to the staging area: 
	$ git add <file name>

# to remove files from the staging area
	$ git rm --cached <file>

# How to write a commit message:
	commit message style guide: http://udacity.github.io/git-styleguide/

	/////////////////////////
	type: subject

	body

	footer
	/////////////////////////

	the Type: 
	  feat: a new feature
	  fix: a bug fix
	  docs: changes to documentation
	  style: formatting, missing semi colons, etc, no code change
	  refactor: refactoring production code
	  test: adding tests, refactoring test; no production code change
	  chore: updating build tasks, package manager configs, etc; no production 
	         code change.

	The Subject: 
	  Subjects should be no greater than 50 characters, should begin with a 
	  capital letter and do not end with a period.

	  Use an imperative tone to describe what a commit does, rather than what 
	  it did. For example, use change; not changed or changes.

	The Body:
	  Not all commits are complex enough to warrent a body, therefore it is 
	  optional and only used when a commit requires a bit of explanation and 
	  context. Use the body to explain the WHAT and WHY of a commit, not the 
	  how. Wrap text to 72 characters per line.

	The Footer:
	  The footer is optional and is only used to to reference tracker IDs.


// Compare Working Directory, Staging Area and Repository //

# Compare working directory with staging area
	$ git diff  //git diff with 0 arguments will compare these two by default

# Compare Staging Area with Repository
	$ git diff --staged

# git 'detached HEAD' state
	When git is in a detached HEAD state that means you have checked out an old
	git commit. To get back to the 'Tip' of the main repo use
	$ git checkout Master

Branches:
	The main branch in a git repository is the 'Master Branch'.

	# See what branches exist in the repository
	  $ git branch  //the branch listed with a '*' is the active branch.
    
    # Create a new branch in the repository
      $ git branch <branch name>

    # Switch to a different branch
      $ git checkout <branch name>



Merging:
	The process of 'merging' a two branches to a single branch.
	with Master branch checked out
	$ git merge master <branch to be merged>

	// delete the old branch label
	$ git branch -d <branch that was merged>

	// find useful git diff information on a commit in a merged branch commit.
	// this will diff the commit with its direct parent commit.
	$ git show <git commit id>

	// if you want to update a branch with new code from master you must:
	1) checkout the branch you want to merge with master
	2) $ git merge <branch to update with master> master


Reachability:
	In git, each commit stores a reference to it's parent commit. Git log will 
	trace all the commits backwards from your current checked-out branch back 
	to the very first commit. Child branches that split off will not be logged 
	if you are not using git log in that specific child branch.

	To save the changes in this new commit, you must designate it as its own 
	branch by using: $ git checkout -b <new_branch_name>

	This is equivalent to running:
	$ git branch <new_branch_name>
	$ git checkout <new_branch_name>

Merging Conflicts:
	If two similar changes in the same file are present during a merge, this 
	will cause a merge conflict.



Github:
	# Creating a new github repository:
	  click on the "+" icon to create a new repository; and name it.

	# Setting up a remote repository
     // origin is standard if you have only one remote repo
	  $ git remote add origin <remote repository URL>
	  $ git remote -v // validate the URL

	# View all remote repositories in your github account
	  $ git remote

	# 'Push'ing the changes to the remote repository:
	  $ git push <remote branch name> <branch to push commits from>
	  $ git push origin master
	  // git push <remote> <local branch>

	# 'Pull'ing any changes from the github remote repository to local
	  $ git pull origin master
	  // git pull <remote> <local branch>

	# 'Fetch'ing a collaborator's commits
	  $ git fetch origin/master master
	  $ git merge origin/master master // to merge the changes together
	  // fix any merge conflicts -- then
	  $ git add <file>
	  $ git commit
	  $ git push origin master
	  // git fetch <remote/branch> <local branch>
	  
	# Github's README.md
	  The README.md is a markdown file meant to provide general information 
	  about a repository. Such information can include, contributers, how to 
	  set up the project, what problem the project is intended to solve, 
	  dependencies, etc.

	# Forking
	  A fork is like a 'git clone' that github will do for you while giving 
	  the original creator of the code credit for his/her work.

	# Pull request
	  A pull request is a way to ask someone who has commit access to a remote 
	  repository to merge in any changes you've made on your fork of their 
	  repository.
	  
	# Keeping a Fro Up-To-Date
	  1) Add the original repository as a REMOTE in your CLONE
	  2) PULL the MASTER BRANCH from the original repository
	  3) MERGE the MASTER BRANCH into your change branch
	  4) PUSH your change back to your FORK

	  as an example:
	  $ git remote add upstream git://gihub.com/upstream.git
	  $ git pull upstream/master master
	  $ git checkout myBranch
	  $ git merge master myBranch
	   // resolve any merge conflicts
	  $ git push myBranch
	  $ git push origin master
	   // initiate a pull request on github.
